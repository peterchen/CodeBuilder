package ${tdo.Package}.domain.example;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * $tdo.ModelObject.Comment 查询条件example类
 * @author $tdo.Author
 * @date $tdo.Date
 */
public class ${tdo.Name}Example {
    protected String orderByClause;

    protected boolean distinct;

    protected List<Criteria> oredCriteria;

    public ${tdo.Name}Example() {
        oredCriteria = new ArrayList<>();
    }

    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    public String getOrderByClause() {
        return orderByClause;
    }

    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    public boolean isDistinct() {
        return distinct;
    }

    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

	#foreach($column in $tdo.ModelObject.Columns.Values)
        public Criteria and${column.Name}IsNull() {
            addCriterion("${column.OriginalName} is null");
            return (Criteria)this;
        }

        public Criteria and${column.Name}IsNotNull() {
            addCriterion("${column.OriginalName} is not null");
            return (Criteria)this;
        }

        public Criteria and${column.Name}EqualTo(${column.LanguageType} value) {
            addCriterion("${column.OriginalName} =", value, "${column.LowerCamelName}");
            return (Criteria)this;
        }

        public Criteria and${column.Name}NotEqualTo(${column.LanguageType} value) {
            addCriterion("${column.OriginalName} <>", value, "${column.LowerCamelName}");
            return (Criteria)this;
        }

        public Criteria and${column.Name}In(List<${column.LanguageType}> values) {
            addCriterion("${column.OriginalName} in", values, "${column.LowerCamelName}");
            return (Criteria)this;
        }

        public Criteria and${column.Name}NotIn(List<${column.LanguageType}> values) {
            addCriterion("${column.OriginalName} not in", values, "${column.LowerCamelName}");
            return (Criteria)this;
        }

        public Criteria and${column.Name}Between(${column.LanguageType} value1, ${column.LanguageType} value2) {
            addCriterion("${column.OriginalName} between", value1, value2, "${column.LowerCamelName}");
            return (Criteria)this;
        }

        public Criteria and${column.Name}NotBetween(${column.LanguageType} value1, ${column.LanguageType} value2) {
            addCriterion("${column.OriginalName} not between", value1, value2, "${column.LowerCamelName}");
            return (Criteria)this;
        }
		
	#if(${column.LanguageType} != "String")
	public Criteria and${column.Name}GreaterThan(${column.LanguageType} value) {
            addCriterion("${column.OriginalName} >", value, "${column.LowerCamelName}");
            return (Criteria)this;
        }

        public Criteria and${column.Name}GreaterThanOrEqualTo(${column.LanguageType} value) {
            addCriterion("${column.OriginalName} >=", value, "${column.LowerCamelName}");
            return (Criteria)this;
        }

        public Criteria and${column.Name}LessThan(${column.LanguageType} value) {
            addCriterion("${column.OriginalName} <", value, "${column.LowerCamelName}");
            return (Criteria)this;
        }

        public Criteria and${column.Name}LessThanOrEqualTo(${column.LanguageType} value) {
            addCriterion("${column.OriginalName} <=", value, "${column.LowerCamelName}");
            return (Criteria)this;
        }
	#end
		
	#if(${column.LanguageType} == "String")
	public Criteria and${column.Name}Like(${column.LanguageType} value) {
            addCriterion("${column.OriginalName} like", value, "${column.LowerCamelName}");
            return (Criteria)this;
        }

        public Criteria and${column.Name}NotLike(${column.LanguageType} value) {
            addCriterion("${column.OriginalName} not like", value, "${column.LowerCamelName}");
            return (Criteria)this;
        }
	#end
    #end
	public Criteria andFieldIsNull(final String fieldName) {
            addCriterion(fieldName + " is null");
            return (Criteria) this;
        }
		
	public Criteria andFieldIsNotNull(final String fieldName) {
            addCriterion(fieldName + " is not null");
            return (Criteria) this;
        }
		
	public Criteria andFieldEqualTo(final String fieldName, final Object fieldValue) {
            addCriterion(fieldName + " = ", fieldValue, fieldName);
            return (Criteria) this;
        }
		
	public Criteria andFieldNotEqualTo(final String fieldName, final Object fieldValue) {
            addCriterion(fieldName + " <> ", fieldValue, fieldName);
            return (Criteria) this;
        }
		
		public Criteria andFieldIn(final String fieldName, final List<Object> values) {
            addCriterion(fieldName + " in ", values, fieldName);
           return (Criteria) this;
        }
		
	public Criteria andFieldNotIn(final String fieldName, final List<Object> values) {
            addCriterion(fieldName + " not in ", values, fieldName);
            return (Criteria) this;
        }
		
	public Criteria andFieldBetween(final String fieldName, final Object fieldValue1,final Object fieldValue2) {
            addCriterion(fieldName + " between ", fieldValue1, fieldValue2, fieldName);
            return (Criteria) this;
        }
		
	public Criteria andFieldNotBetween(final String fieldName, final Object fieldValue1,final Object fieldValue2) {
            addCriterion(fieldName + "  not between ", fieldValue1, fieldValue2, fieldName);
            return (Criteria) this;
        }
		
		public Criteria andFieldGreaterThan(final String fieldName, final Object fieldValue) {
            addCriterion(fieldName + " > ", fieldValue, fieldName);
            return (Criteria) this;
        }

	public Criteria andFieldGreaterThanOrEqualTo(final String fieldName, final Object fieldValue) {
            addCriterion(fieldName + " >= ", fieldValue, fieldName);
            return (Criteria) this;
        }
		
	public Criteria andFieldLessThan(final String fieldName, final Object fieldValue) {
            addCriterion(fieldName + " < ", fieldValue, fieldName);
            return (Criteria) this;
        }
		
		public Criteria andFieldLessThanOrEqualTo(final String fieldName, final Object fieldValue) {
            addCriterion(fieldName + " <= ", fieldValue, fieldName);
            return (Criteria) this;
        }
		
	public Criteria andFieldLike(final String fieldName, final String fieldValue) {
            addCriterion(fieldName + " like ", fieldValue, fieldName);
            return (Criteria) this;
        }
		
	public Criteria andFieldNotLike(final String fieldName, final String fieldValue) {
            addCriterion(fieldName + "  not like ", fieldValue, fieldName);
            return (Criteria) this;
        }
    }

    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}
